// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input Should be create a snapshot 1`] = `
<Fragment>
  <ForwardRef(InternalForm)
    form={
      Object {
        "__INTERNAL__": Object {
          "itemRef": [Function],
        },
        "getFieldError": [Function],
        "getFieldInstance": [Function],
        "getFieldValue": [Function],
        "getFieldsError": [Function],
        "getFieldsValue": [Function],
        "getInternalHooks": [Function],
        "isFieldTouched": [Function],
        "isFieldValidating": [Function],
        "isFieldsTouched": [Function],
        "isFieldsValidating": [Function],
        "resetFields": [Function],
        "scrollToField": [Function],
        "setFields": [Function],
        "setFieldsValue": [Function],
        "submit": [Function],
        "validateFields": [Function],
      }
    }
    layout="horizontal"
    onFinish={[Function]}
  >
    <div>
      <LoginItem
        inputPassword={true}
        key="password"
        maxLength={20}
        name="password"
        placeholder="Password"
        prefix={<ForwardRef(AimOutlined) />}
        rules={
          Array [
            Object {
              "message": "Validate information",
              "required": true,
            },
            Object {
              "message": "Minimum length 3",
              "min": 3,
            },
          ]
        }
      />
      <div />
    </div>
  </ForwardRef(InternalForm)>
</Fragment>
`;

exports[`Input Should be create a snapshot with props 1`] = `
<Fragment>
  <ForwardRef(InternalForm)
    form={
      Object {
        "__INTERNAL__": Object {
          "itemRef": [Function],
        },
        "getFieldError": [Function],
        "getFieldInstance": [Function],
        "getFieldValue": [Function],
        "getFieldsError": [Function],
        "getFieldsValue": [Function],
        "getInternalHooks": [Function],
        "isFieldTouched": [Function],
        "isFieldValidating": [Function],
        "isFieldsTouched": [Function],
        "isFieldsValidating": [Function],
        "resetFields": [Function],
        "scrollToField": [Function],
        "setFields": [Function],
        "setFieldsValue": [Function],
        "submit": [Function],
        "validateFields": [Function],
      }
    }
    layout="horizontal"
    onFinish={[Function]}
  >
    <div>
      <LoginItem
        inputPassword={true}
        key="password"
        maxLength={20}
        name="password"
        placeholder="Password"
        prefix={<ForwardRef(AimOutlined) />}
        rules={
          Array [
            Object {
              "message": "Validate information",
              "required": true,
            },
            Object {
              "message": "Minimum length 3",
              "min": 3,
            },
          ]
        }
      />
      <div />
    </div>
  </ForwardRef(InternalForm)>
</Fragment>
`;

exports[`Input Should be create a snapshot with props 2`] = `
<form
  className="ant-form ant-form-horizontal"
  onSubmit={[Function]}
>
  <div>
    <div
      className="ant-row ant-form-item"
      style={Object {}}
    >
      <div
        className="ant-col ant-form-item-control"
        style={Object {}}
      >
        <div
          className="ant-form-item-control-input"
        >
          <div
            className="ant-form-item-control-input-content"
          >
            <div
              className="undefined "
            >
              <p />
              <span
                className="ant-input-password ant-input-affix-wrapper"
                onMouseUp={[Function]}
              >
                <span
                  className="ant-input-prefix"
                >
                  <span
                    aria-label="aim"
                    className="anticon anticon-aim"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-icon="aim"
                      fill="currentColor"
                      focusable="false"
                      height="1em"
                      key="svg-aim"
                      viewBox="64 64 896 896"
                      width="1em"
                    >
                      <defs
                        key="svg-aim-svg-0"
                      >
                        <style
                          key="svg-aim-svg-0-defs-0"
                        />
                      </defs>
                      <path
                        d="M952 474H829.8C812.5 327.6 696.4 211.5 550 194.2V72c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v122.2C327.6 211.5 211.5 327.6 194.2 474H72c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h122.2C211.5 696.4 327.6 812.5 474 829.8V952c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V829.8C696.4 812.5 812.5 696.4 829.8 550H952c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zM512 756c-134.8 0-244-109.2-244-244s109.2-244 244-244 244 109.2 244 244-109.2 244-244 244z"
                        key="svg-aim-svg-1"
                      />
                      <path
                        d="M512 392c-32.1 0-62.1 12.4-84.8 35.2-22.7 22.7-35.2 52.7-35.2 84.8s12.5 62.1 35.2 84.8C449.9 619.4 480 632 512 632s62.1-12.5 84.8-35.2C619.4 574.1 632 544 632 512s-12.5-62.1-35.2-84.8A118.57 118.57 0 00512 392z"
                        key="svg-aim-svg-2"
                      />
                    </svg>
                  </span>
                </span>
                <input
                  action="click"
                  className="ant-input"
                  id="password"
                  maxLength={20}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onCopy={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onPaste={[Function]}
                  placeholder="Password"
                  style={null}
                  type="password"
                  value=""
                />
                <span
                  className="ant-input-suffix"
                >
                  <span
                    aria-label="eye-invisible"
                    className="anticon anticon-eye-invisible ant-input-password-icon"
                    onClick={[Function]}
                    onMouseDown={[Function]}
                    onMouseUp={[Function]}
                    role="img"
                    tabIndex={-1}
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-icon="eye-invisible"
                      fill="currentColor"
                      focusable="false"
                      height="1em"
                      key="svg-eye-invisible"
                      viewBox="64 64 896 896"
                      width="1em"
                    >
                      <path
                        d="M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z"
                        key="svg-eye-invisible-svg-0"
                      />
                      <path
                        d="M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z"
                        key="svg-eye-invisible-svg-1"
                      />
                    </svg>
                  </span>
                </span>
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div />
  </div>
</form>
`;

exports[`Input cancelOperation should call cancelOperation and show button 1`] = `
<Fragment>
  <ForwardRef(InternalForm)
    form={
      Object {
        "__INTERNAL__": Object {
          "itemRef": [Function],
        },
        "getFieldError": [Function],
        "getFieldInstance": [Function],
        "getFieldValue": [Function],
        "getFieldsError": [Function],
        "getFieldsValue": [Function],
        "getInternalHooks": [Function],
        "isFieldTouched": [Function],
        "isFieldValidating": [Function],
        "isFieldsTouched": [Function],
        "isFieldsValidating": [Function],
        "resetFields": [Function],
        "scrollToField": [Function],
        "setFields": [Function],
        "setFieldsValue": [Function],
        "submit": [Function],
        "validateFields": [Function],
      }
    }
    layout="horizontal"
    onFinish={[Function]}
  >
    <div>
      <LoginItem
        inputPassword={true}
        key="password"
        maxLength={20}
        name="password"
        placeholder="Password"
        prefix={<ForwardRef(AimOutlined) />}
        rules={
          Array [
            Object {
              "message": "Validate information",
              "required": true,
            },
            Object {
              "message": "Minimum length 3",
              "min": 3,
            },
          ]
        }
      />
      <div>
        <Link
          onClick={[Function]}
          to="#"
        >
          Cancel
        </Link>
      </div>
    </div>
  </ForwardRef(InternalForm)>
</Fragment>
`;

exports[`Input onValidateForm should call onValidateForm and show button 1`] = `
<form
  className="ant-form ant-form-horizontal"
  onSubmit={[Function]}
>
  <div>
    <div
      className="ant-row ant-form-item ant-form-item-is-validating"
      style={Object {}}
    >
      <div
        className="ant-col ant-form-item-control"
        style={Object {}}
      >
        <div
          className="ant-form-item-control-input"
        >
          <div
            className="ant-form-item-control-input-content"
          >
            <div
              className="undefined undefined"
            >
              <p>
                <label
                  className=""
                  htmlFor="labelInput"
                >
                  Password
                </label>
              </p>
              <span
                className="ant-input-password ant-input-affix-wrapper"
                onMouseUp={[Function]}
              >
                <span
                  className="ant-input-prefix"
                >
                  <span
                    aria-label="aim"
                    className="anticon anticon-aim"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-icon="aim"
                      fill="currentColor"
                      focusable="false"
                      height="1em"
                      key="svg-aim"
                      viewBox="64 64 896 896"
                      width="1em"
                    >
                      <defs
                        key="svg-aim-svg-0"
                      >
                        <style
                          key="svg-aim-svg-0-defs-0"
                        />
                      </defs>
                      <path
                        d="M952 474H829.8C812.5 327.6 696.4 211.5 550 194.2V72c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v122.2C327.6 211.5 211.5 327.6 194.2 474H72c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h122.2C211.5 696.4 327.6 812.5 474 829.8V952c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V829.8C696.4 812.5 812.5 696.4 829.8 550H952c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zM512 756c-134.8 0-244-109.2-244-244s109.2-244 244-244 244 109.2 244 244-109.2 244-244 244z"
                        key="svg-aim-svg-1"
                      />
                      <path
                        d="M512 392c-32.1 0-62.1 12.4-84.8 35.2-22.7 22.7-35.2 52.7-35.2 84.8s12.5 62.1 35.2 84.8C449.9 619.4 480 632 512 632s62.1-12.5 84.8-35.2C619.4 574.1 632 544 632 512s-12.5-62.1-35.2-84.8A118.57 118.57 0 00512 392z"
                        key="svg-aim-svg-2"
                      />
                    </svg>
                  </span>
                </span>
                <input
                  action="click"
                  className="ant-input"
                  id="password"
                  maxLength={20}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onCopy={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onPaste={[Function]}
                  placeholder="Password"
                  style={null}
                  type="password"
                  value="username"
                />
                <span
                  className="ant-input-suffix"
                >
                  <span
                    aria-label="eye-invisible"
                    className="anticon anticon-eye-invisible ant-input-password-icon"
                    onClick={[Function]}
                    onMouseDown={[Function]}
                    onMouseUp={[Function]}
                    role="img"
                    tabIndex={-1}
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-icon="eye-invisible"
                      fill="currentColor"
                      focusable="false"
                      height="1em"
                      key="svg-eye-invisible"
                      viewBox="64 64 896 896"
                      width="1em"
                    >
                      <path
                        d="M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z"
                        key="svg-eye-invisible-svg-0"
                      />
                      <path
                        d="M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z"
                        key="svg-eye-invisible-svg-1"
                      />
                    </svg>
                  </span>
                </span>
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      className="ant-row ant-form-item"
      style={Object {}}
    >
      <div
        className="ant-col ant-form-item-control"
        style={Object {}}
      >
        <div
          className="ant-form-item-control-input"
        >
          <div
            className="ant-form-item-control-input-content"
          >
            <button
              className="ant-btn ant-btn-primary"
              disabled={false}
              onClick={[Function]}
              type="submit"
            >
              <span
                key=".0"
              >
                validate
              </span>
            </button>
          </div>
        </div>
      </div>
    </div>
    <div />
  </div>
</form>
`;

exports[`Input returnOperation should call returnOperation and show button 1`] = `
<Fragment>
  <ForwardRef(InternalForm)
    form={
      Object {
        "__INTERNAL__": Object {
          "itemRef": [Function],
        },
        "getFieldError": [Function],
        "getFieldInstance": [Function],
        "getFieldValue": [Function],
        "getFieldsError": [Function],
        "getFieldsValue": [Function],
        "getInternalHooks": [Function],
        "isFieldTouched": [Function],
        "isFieldValidating": [Function],
        "isFieldsTouched": [Function],
        "isFieldsValidating": [Function],
        "resetFields": [Function],
        "scrollToField": [Function],
        "setFields": [Function],
        "setFieldsValue": [Function],
        "submit": [Function],
        "validateFields": [Function],
      }
    }
    layout="horizontal"
    onFinish={[Function]}
  >
    <div>
      <LoginItem
        inputPassword={true}
        key="password"
        maxLength={20}
        name="password"
        placeholder="Password"
        prefix={<ForwardRef(AimOutlined) />}
        rules={
          Array [
            Object {
              "message": "Validate information",
              "required": true,
            },
            Object {
              "message": "Minimum length 3",
              "min": 3,
            },
          ]
        }
      />
      <div>
        <Link
          onClick={[Function]}
          to="#"
        >
          Return
        </Link>
      </div>
    </div>
  </ForwardRef(InternalForm)>
</Fragment>
`;
