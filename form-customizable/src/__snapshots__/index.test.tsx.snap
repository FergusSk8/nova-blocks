// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input Should be create a snapshot 1`] = `
<Fragment>
  <ForwardRef(InternalForm)
    form={
      Object {
        "__INTERNAL__": Object {
          "itemRef": [Function],
        },
        "getFieldError": [Function],
        "getFieldInstance": [Function],
        "getFieldValue": [Function],
        "getFieldsError": [Function],
        "getFieldsValue": [Function],
        "getInternalHooks": [Function],
        "isFieldTouched": [Function],
        "isFieldValidating": [Function],
        "isFieldsTouched": [Function],
        "isFieldsValidating": [Function],
        "resetFields": [Function],
        "scrollToField": [Function],
        "setFields": [Function],
        "setFieldsValue": [Function],
        "submit": [Function],
        "validateFields": [Function],
      }
    }
    layout="horizontal"
    onFinish={[Function]}
  >
    <div>
      <LoginItem
        inputPassword={true}
        key="password"
        maxLength={20}
        name="password"
        placeholder="Password"
        prefix={<ForwardRef(AimOutlined) />}
        rules={
          Array [
            Object {
              "message": "Validate information",
              "required": true,
            },
            Object {
              "message": "Minimum length 3",
              "min": 3,
            },
          ]
        }
      />
      <div />
    </div>
  </ForwardRef(InternalForm)>
</Fragment>
`;

exports[`Input Should be create a snapshot with props 1`] = `
<Fragment>
  <ForwardRef(InternalForm)
    form={
      Object {
        "__INTERNAL__": Object {
          "itemRef": [Function],
        },
        "getFieldError": [Function],
        "getFieldInstance": [Function],
        "getFieldValue": [Function],
        "getFieldsError": [Function],
        "getFieldsValue": [Function],
        "getInternalHooks": [Function],
        "isFieldTouched": [Function],
        "isFieldValidating": [Function],
        "isFieldsTouched": [Function],
        "isFieldsValidating": [Function],
        "resetFields": [Function],
        "scrollToField": [Function],
        "setFields": [Function],
        "setFieldsValue": [Function],
        "submit": [Function],
        "validateFields": [Function],
      }
    }
    layout="horizontal"
    onFinish={[Function]}
  >
    <div>
      <LoginItem
        inputPassword={true}
        key="password"
        maxLength={20}
        name="password"
        placeholder="Password"
        prefix={<ForwardRef(AimOutlined) />}
        rules={
          Array [
            Object {
              "message": "Validate information",
              "required": true,
            },
            Object {
              "message": "Minimum length 3",
              "min": 3,
            },
          ]
        }
      />
      <div />
    </div>
  </ForwardRef(InternalForm)>
</Fragment>
`;

exports[`Input cancelOperation should call cancelOperation and show button 1`] = `
<Fragment>
  <ForwardRef(InternalForm)
    form={
      Object {
        "__INTERNAL__": Object {
          "itemRef": [Function],
        },
        "getFieldError": [Function],
        "getFieldInstance": [Function],
        "getFieldValue": [Function],
        "getFieldsError": [Function],
        "getFieldsValue": [Function],
        "getInternalHooks": [Function],
        "isFieldTouched": [Function],
        "isFieldValidating": [Function],
        "isFieldsTouched": [Function],
        "isFieldsValidating": [Function],
        "resetFields": [Function],
        "scrollToField": [Function],
        "setFields": [Function],
        "setFieldsValue": [Function],
        "submit": [Function],
        "validateFields": [Function],
      }
    }
    layout="horizontal"
    onFinish={[Function]}
  >
    <div>
      <LoginItem
        inputPassword={true}
        key="password"
        maxLength={20}
        name="password"
        placeholder="Password"
        prefix={<ForwardRef(AimOutlined) />}
        rules={
          Array [
            Object {
              "message": "Validate information",
              "required": true,
            },
            Object {
              "message": "Minimum length 3",
              "min": 3,
            },
          ]
        }
      />
      <div>
        <Link
          onClick={[Function]}
          to="#"
        >
          Cancel
        </Link>
      </div>
    </div>
  </ForwardRef(InternalForm)>
</Fragment>
`;

exports[`Input returnOperation should call returnOperation and show button 1`] = `
<Fragment>
  <ForwardRef(InternalForm)
    form={
      Object {
        "__INTERNAL__": Object {
          "itemRef": [Function],
        },
        "getFieldError": [Function],
        "getFieldInstance": [Function],
        "getFieldValue": [Function],
        "getFieldsError": [Function],
        "getFieldsValue": [Function],
        "getInternalHooks": [Function],
        "isFieldTouched": [Function],
        "isFieldValidating": [Function],
        "isFieldsTouched": [Function],
        "isFieldsValidating": [Function],
        "resetFields": [Function],
        "scrollToField": [Function],
        "setFields": [Function],
        "setFieldsValue": [Function],
        "submit": [Function],
        "validateFields": [Function],
      }
    }
    layout="horizontal"
    onFinish={[Function]}
  >
    <div>
      <LoginItem
        inputPassword={true}
        key="password"
        maxLength={20}
        name="password"
        placeholder="Password"
        prefix={<ForwardRef(AimOutlined) />}
        rules={
          Array [
            Object {
              "message": "Validate information",
              "required": true,
            },
            Object {
              "message": "Minimum length 3",
              "min": 3,
            },
          ]
        }
      />
      <div>
        <Link
          onClick={[Function]}
          to="#"
        >
          Return
        </Link>
      </div>
    </div>
  </ForwardRef(InternalForm)>
</Fragment>
`;
